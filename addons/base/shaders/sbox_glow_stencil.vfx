//-------------------------------------------------------------------------------------------------------------------------------------------------------------
HEADER
{
	DevShader = true;
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Fancy glow";
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
MODES
{
	VrForward();

	Default("clear.vfx")
	
	Depth( "vr_depth_only.vfx" );
	ProjectionDepth( "vr_depth_only.vfx" );
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
FEATURES
{
	Feature( F_WRITE_TO_DESTALPHA, 0..1, "Destalpha and depth" );
	Feature( F_DISABLE_STENCIL_WRITE, 0..1, "Disable writing to the stencil buffer if bound" );
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
COMMON
{
	#include "system.fxc" // This should always be the first include in COMMON
	#include "vr_common.fxc"
	#define NORMAL_MAP_MODE_TANGENT_SPACE 1

	float3 g_vGlowFrontTint < Attribute( "GlowFrontTint" ); Default3( 10.0, 10.0, 10.0 ); >; 
	float3 g_vGlowBackTint < Attribute( "GlowBackTint" ); Default3( 0.0, 0.0, 0.0 ); >; 

	float2 g_vGlowSolid < Attribute( "GlowSolid" ); Default2( 0.1, 0.1 ); >; //Front, back, if it's additive or multiplicative
	float g_fGlowSize < Attribute( "GlowSize" ); Default( 1.0 ); >; 

	DynamicCombo( D_DEPTH_FADE, 0..1, Sys( ALL ) );

}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
struct VS_INPUT
{
	float3 vPositionOs : POSITION < Semantic( PosXyz ); >;
	float4 vNormalOs : NORMAL < Semantic( OptionallyCompressedTangentFrame ); >;
	float2 vTexCoord : TEXCOORD0 < Semantic( LowPrecisionUv ); >;

	// Skinning
	#if ( D_BLEND_WEIGHT_COUNT >= 1 || D_SKINNING > 0 )
		uint4 vBlendIndices : BLENDINDICES < Semantic( BlendIndices ); >;
	#endif
	#if ( D_BLEND_WEIGHT_COUNT >= 2 || D_SKINNING > 0 )
		float4 vBlendWeight : BLENDWEIGHT < Semantic( BlendWeight ); >;
	#endif

	// Instancing data
	float2 vTransformTextureUV : TEXCOORD13 < Semantic( InstanceTransformUv ); >;

	#if ( D_MULTIVIEW_INSTANCING )
		uint nInstanceID : SV_InstanceID < Semantic( None ); >;
	#endif
};

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
struct PS_INPUT
{
	float4 vPositionCs : TEXCOORD2;
	float3 vPositionWs : TEXCOORD3;

	float4 vVertexColor : TEXCOORD4;

	float2 vDepthZWPs				: TEXCOORD6;

	// VS only
	#if ( PROGRAM == VFX_PROGRAM_VS )
		float4 vPositionPs : SV_Position;
	#endif

	// PS only
	#if ( PROGRAM == VFX_PROGRAM_PS )
		float4 vPositionSs : SV_ScreenPosition;
	#endif
};

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
VS
{
	// Includes -----------------------------------------------------------------------------------------------------------------------------------------------
	#include "system.fxc"
	#include "common.fxc"
	#include "math_general.fxc"
	#include "instancing.fxc"
	#include "vs_decompress.fxc"

	// System Textures ----------------------------------------------------------------------------------------------------------------------------------------

	// Constants ----------------------------------------------------------------------------------------------------------------------------------------------

	// Attributes ---------------------------------------------------------------------------------------------------------------------------------------------
	// Main ---------------------------------------------------------------------------------------------------------------------------------------------------
	PS_INPUT MainVs( VS_INPUT i )
	{
		PS_INPUT o;

		//---------------//
		// Instance data //
		//---------------//
		BEGIN_VERTEX_DATA;
		{
			DEFINE_PER_VERTEX_FIELD( i.vPositionOs, position );
			DEFINE_PER_VERTEX_FIELD( i.vNormalOs, normal );
			DEFINE_PER_VERTEX_FIELD( i.vTexCoord, texcoord0 );
			DEFINE_PER_INSTANCE_FIELD( i.vTransformTextureUV, texcoord13 );
		}
		END_VERTEX_DATA;

		// Extra per-instance data: currently stores a per-vertex color scale used for fading
		ExtraShaderData_t vExtraPerInstanceShaderData = GetExtraPerInstanceShaderData( i );
		o.vVertexColor.rgba = vExtraPerInstanceShaderData.vTint;

		//---------------------------------------------------//
		// Generate Object->World matrix and animation scale //
		//---------------------------------------------------//
		float3x4 matObjectToWorld = CalculateInstancingObjectToWorldMatrix( i );
		float3 vAnimationScale = CalculateInstancingAnimationScale( i );

		//-------------------------------------//
		// Decompress normal and tangent basis //
		//-------------------------------------//
		float4 vInputNormalOs = i.vNormalOs.xyzw;
		//-------------------------//
		// World normal & morphing //
		//-------------------------//
		float3 vNormalWs;
		float3 vPositionOs = i.vPositionOs.xyz;
		float3 vNormalOs;

		//--------------------------------//
		// Tangent space and world normal //
		//--------------------------------//
		DecompressNormal( vInputNormalOs.xyzw, vNormalOs.xyz );
		vNormalWs.xyz = normalize( mul( matObjectToWorld, float4( vNormalOs.xyz, 0.0 ) ) );

		//----------------//
		// World position //
		//----------------//
		float3 vPositionWs = mul( matObjectToWorld, float4( vPositionOs.xyz * vAnimationScale.xyz, 1.0 ) );

		//--------------------//
		// Projected position //
		//--------------------//
		o.vPositionPs.xyzw = Position3WsToPs( vPositionWs.xyz + ( vNormalWs * g_fGlowSize ) );
		
		//-----------------------------------//
		// Normalized depth & world position //
		//-----------------------------------//
		o.vDepthZWPs.xy = o.vPositionPs.zw;

		o.vPositionCs.xyzw = ClipSpacePositionForLightBinner(  vPositionWs.xyz, o.vPositionPs.xyzw );

		#if ( S_MODE_TOOLS_WIREFRAME )
		{
			o.vVertexColor.rgb *= g_vWireframeColor.rgb;
		}
		#endif

		return o;
	}
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
PS
{
	// Includes -----------------------------------------------------------------------------------------------------------------------------------------------
	#include "system.fxc"
	#include "common.fxc"
	#include "math_general.fxc"
	#include "encoded_normals.fxc"

	DynamicCombo( D_SCENE_DEPTH_MSAA, 0..1, Sys( ALL ) );

	BoolAttribute( SupportsMappingDimensions, true );

	// Render State -------------------------------------------------------------------------------------------------------------------------------------------
	RenderState( StencilEnable, F_DISABLE_STENCIL_WRITE ? false : true );
	RenderState( StencilPassOp, REPLACE );
	RenderState( StencilRef, 1 );

	RenderState( ColorWriteEnable0, F_WRITE_TO_DESTALPHA ? RGBA : RGB );

	RenderState( DepthFunc, LESS_EQUAL );
	RenderState( DepthWriteEnable, true );
	RenderState( BlendEnable, false );

	// Attributes ---------------------------------------------------------------------------------------------------------------------------------------------

	// System Textures ----------------------------------------------------------------------------------------------------------------------------------------
	#if D_SCENE_DEPTH_MSAA
		CreateTexture2DMS( g_tSceneDepth ) < Attribute( "SceneDepth" ); SrgbRead( false ); Filter( POINT ); >;
	#else
		CreateTexture2DWithoutSampler( g_tSceneDepth ) < Attribute( "SceneDepth" ); SrgbRead( false ); Dx9Sampler( g_sPoint ); >;
	#endif

	// Globals ------------------------------------------------------------------------------------------------------------------------------------------------
	float g_fDepthFeatherDistance < Attribute( "DepthFeatherDistance" ); Default( 6 ); >;
	float g_fDepthFeatherTolerance < Attribute( "DepthFeatherTolerance" ); Default( .1 ); >;

	// Main ---------------------------------------------------------------------------------------------------------------------------------------------------
	struct PS_OUTPUT
	{
		// Prepass g-buffer
		#if ( S_MODE_PREPASS_GBUFFER )
			float4 vNormalWs : SV_Target0;
			float4 vDepthAndDepthSquared : SV_Target1;

		// Forward and wireframe
		#else
			float4 vColor : SV_Target0;
		#endif
	};

	PS_OUTPUT MainPs( PS_INPUT i )
	{

		float2 vScreenUv = CalculateViewportUvFromInvSize( i.vPositionSs.xy, g_vInvGBufferSize.xy );

		//----------------//
		// Combine result //
		//----------------//
		float fDepth = i.vDepthZWPs.x / i.vDepthZWPs.y;

		PS_OUTPUT o;
		
		float flDepthSample;

		// :( hardcoded the downsample... should probably also check neighbor samples too and compute several fade values to average.
		#if ( D_SCENE_DEPTH_MSAA )
			flDepthSample = Tex2DMS( g_tSceneDepth, int2( i.vPositionSs.xy ), 0 ).r;
		#else
			flDepthSample = Tex2DLoad( g_tSceneDepth, int3( i.vPositionSs.xy , 0 ) ).r;
		#endif

		float flAdjustedDepthSample = RemapValClamped( flDepthSample, g_flViewportMinZ, g_flViewportMaxZ, 0.0, 1.0 );
		float fSceneDepth = ConvertDepthPsToVs( flAdjustedDepthSample );
		float fMyDepth = ConvertDepthPsToVs( fDepth );

		float fFeather = saturate( ( ( fSceneDepth - g_fDepthFeatherTolerance ) - fMyDepth ) / g_fDepthFeatherDistance );

		// Also premultiply in the vertex color since we're not alpha-blending.
		float3 fBackColor = ( fFeather ) * ( g_vGlowBackTint * i.vVertexColor.rgb );
		float3 fFrontColor = ( 1.0f - fFeather ) * ( g_vGlowFrontTint * i.vVertexColor.rgb );

		o.vColor.rgb = fBackColor + fFrontColor;
		// Because of what the composite for the glow passes do (clears to alpha=1 and assumes alpha is 1 when nothing is rendered?)
		o.vColor.a = lerp( fFeather, g_vGlowSolid.x, g_vGlowSolid.y );

		return o;
	}
}
