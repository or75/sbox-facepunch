HEADER
{
    CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
    Description = "Framebuffer copy passthrough shader";
}

MODES
{
    Default();
    VrForward();
}

FEATURES
{
}

COMMON
{
    #include "postprocess/shared.hlsl"
}

struct VertexInput
{
    float3 vPositionOs : POSITION < Semantic( PosXyz ); >;
    float2 vTexCoord : TEXCOORD0 < Semantic( LowPrecisionUv ); >;
};

struct PixelInput
{
    float4 vPositionPs : SV_Position;
    float2 vTexCoord : TEXCOORD0;
    #if ( PROGRAM == VFX_PROGRAM_PS )
        float4 vPositionSs : SV_ScreenPosition;
    #endif
};

VS
{
    PixelInput MainVs( VertexInput i )
    {
        PixelInput o;
        o.vPositionPs = float4(i.vPositionOs.xyz, 1.0f);
        o.vTexCoord = i.vTexCoord;
        return o;
    }
}

PS
{
    #include "postprocess/common.hlsl"

    RenderState( DepthWriteEnable, false );
    RenderState( DepthEnable, false );
    DynamicCombo( D_NO_UV, 0..1, Sys( PC ) );
    CreateTexture2D( g_tColorBuffer ) < Attribute( "ColorBuffer" );  	SrgbRead( true ); Filter( MIN_MAG_LINEAR_MIP_POINT ); AddressU( CLAMP ); AddressV( CLAMP ); >;

    struct PixelOutput
    {
        float4 vColor : SV_Target0;
    };

    PixelOutput MainPs( PixelInput i )
    {
        PixelOutput o;
        #if D_NO_UV
            float2 vScreenUv = CalculateViewportUvFromInvSize( i.vPositionSs.xy, 1.0f / g_vRenderTargetSize );
        #else 
            float2 vScreenUv = i.vTexCoord.xy;
        #endif
        o.vColor.rgb = Tex2DLevel( g_tColorBuffer, vScreenUv.xy, 0.0 ).rgb;
        o.vColor.a = 1.0f;
        return o;
    }
}