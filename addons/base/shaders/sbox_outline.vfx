// Copyright (c) Valve Corporation, All rights reserved. ==================================================================
//
//=========================================================================================================================

HEADER
{
	DevShader = true;
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Standard shader for surfaces that require normal maps";
	Version = 31;
}

//=========================================================================================================================

MODES
{
	VrForward();

	ToolsVis( S_MODE_TOOLS_VIS );
	ToolsWireframe( "vr_tools_wireframe.vfx" );
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" );
}

//=========================================================================================================================

FEATURES
{
	#include "vr_common_features.fxc"
}

//=========================================================================================================================

COMMON
{
	#define ENABLE_BINDLESS_RUNTIME
	#define ENABLE_NORMAL_MAPS
	#define S_SPECULAR 0
	#define S_SPECULAR_CUBE_MAP 0
	#define S_TRANSLUCENT 0
	#define S_ALPHA_TEST 0
	#define S_UV2_DEFAULT_FOR_AO 0
	#define BLEND_MODE_ALREADY_SET

	#include "system.fxc" // This should always be the first include in COMMON
	#include "vr_common.fxc"
}

//=========================================================================================================================

struct VS_INPUT
{
	#include "vr_shared_standard_vs_input.fxc"
};

//=========================================================================================================================

struct PS_INPUT
{
	#include "vr_shared_standard_ps_input.fxc"
};

//=========================================================================================================================

VS
{
	#include "vr_shared_standard_vs_code.fxc"

	//
	// Main
	//
	PS_INPUT MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PS_INPUT o = VS_SharedStandardProcessing( i );

		return VS_CommonProcessing_Post( o );
	}
}

//=========================================================================================================================

PS
{
	#include "bindlessfastpath.fxc"

	RenderState( BlendEnable,  false );
	RenderState( SrcBlend, ONE );
	RenderState( DstBlend, ZERO );

	//
	// Albedo & Metalness
	//

	#include "vr_shared_standard_ps_code.fxc"

	//-----------------------------------------------------------------------------------------------------------------

	PS_OUTPUT MainPs( PS_INPUT i )
	{
		FinalCombinerInput_t finalCombinerInput = PS_SharedStandardProcessing( i );
        
		PS_OUTPUT o;
		float3 vPositionWs = i.vPositionWithOffsetWs.xyz;
        
        float2 vMSAAOffset = frac(i.vPositionSs.xy);
        float3 vRay = normalize( vPositionWs );
        float fFresnel = -dot( i.vNormalWs, vRay );

        if( fFresnel > 0.2 )
            discard;

        o.vColor.rgba = 1.0;
		return o;

		//return PS_FinalCombiner( finalCombinerInput );
	}
}

//=========================================================================================================================

