HEADER
{
    CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
    Description = "Standard post processing shader";
    DevShader = true;
}

MODES
{
    Default();
    VrForward();
}

FEATURES
{
}

COMMON
{
    #include "postprocess/shared.hlsl"
}

struct VertexInput
{
    float3 vPositionOs : POSITION < Semantic( PosXyz ); >;
    float2 vTexCoord : TEXCOORD0 < Semantic( LowPrecisionUv ); >;
};

struct PixelInput
{
    float2 vTexCoord : TEXCOORD0;

	// VS only
	#if ( PROGRAM == VFX_PROGRAM_VS )
		float4 vPositionPs		: SV_Position;
	#endif

	// PS only
	#if ( ( PROGRAM == VFX_PROGRAM_PS ) )
		float4 vPositionSs		: SV_ScreenPosition;
	#endif
};

VS
{
    PixelInput MainVs( VertexInput i )
    {
        PixelInput o;
        
        o.vPositionPs = float4(i.vPositionOs.xy, 0.0f, 1.0f);
        o.vTexCoord = i.vTexCoord;
        return o;
    }
}

PS
{
    #include "postprocess/common.hlsl"
    #include "postprocess/functions.hlsl"
    #include "postprocess/falloff.hlsl"
    #include "common/proceedural.hlsl"

    RenderState( DepthWriteEnable, false );
    RenderState( DepthEnable, false );

    CreateTexture2D( g_tColorBuffer ) < Attribute( "ColorBuffer" );  	SrgbRead( true ); Filter( MIN_MAG_LINEAR_MIP_POINT ); AddressU( MIRROR ); AddressV( MIRROR ); >;
    CreateTexture2D( g_tDepthBuffer ) < Attribute( "DepthBuffer" ); 	SrgbRead( false ); Filter( MIN_MAG_MIP_POINT ); AddressU( CLAMP ); AddressV( CLAMP ); >;
    SamplerState g_sBilinearWrap < Filter( BILINEAR ); AddressU( WRAP ); AddressV( WRAP ); >;

    float flCameraFOV< Attribute("CameraFOV"); Default(0); >;

    struct PixelOutput
    {
        float4 vColor : SV_Target0;
    };

    DynamicCombo( D_COLOR_OVERLAY, 0..3, Sys( PC ) ); // 1 = Additive, 2 = Multiply, 3 = Mix
    DynamicCombo( D_SATURATE, 0..1, Sys( PC ) );
    DynamicCombo( D_FILM_GRAIN, 0..1, Sys( PC ) );
    DynamicCombo( D_VIGNETTE, 0..1, Sys( PC ) );

    //#if D_COLOR_OVERLAY
        float3 vColorOverlayColor< Attribute("standard.coloroverlay.color"); Default3(1,0,0); >;
        float flColorOverlayAmount< Attribute("standard.coloroverlay.amount"); Default(0.0f); >;
        float flColorOverlayFalloffModifier< Attribute("standard.coloroverlay.falloff"); Default(0.0f); >; 
    //#endif

    //#if D_SATURATE
        float flSaturationAmount< Attribute("standard.saturate.amount"); Range(0.0f, 1.0f); Default(1.0f); >;
        float flSaturationFalloffModifier< Attribute("standard.saturate.falloff"); Default(0.0f); >; 
    //#endif

    //#if D_FILM_GRAIN
        float flGrainIntensity< Attribute("standard.grain.intensity"); Range(0.0f, 1.0f); >;
        float flGrainResponse< Attribute("standard.grain.response"); Range(0.0f, 1.0f); >;
        float flGrainFalloffModifier< Attribute("standard.grain.falloff"); Default(0.0f); >; 
        CreateInputTexture2D( TextureGrain, Linear, 8, "", "_grain", "Grain", Default( 0.0f ) );
        CreateTexture2DWithoutSampler( g_tGrain )< Channel( R, Box( TextureGrain ), Linear ); OutputFormat( BC7 ); SrgbRead( false ); >;
    //#endif

    //#if D_VIGNETTE
        float3 vVignetteColor< Attribute("standard.vignette.color"); Default3(0.0f,0.0f,0.0f); >;
        float flVignetteIntensity< Attribute("standard.vignette.intensity"); Range(0.0f, 1.0f); Default(0.0f); >;
        float flVignetteSmoothness< Attribute("standard.vignette.smoothness"); Range(0.0f, 1.0f); Default(1.0f); >;
        float flVignetteRoundness< Attribute("standard.vignette.roundness"); Range(0.0f, 8.0f); Default(2.0f); >;
        float2 vVignetteCenter< Attribute("standard.vignette.center"); Default2(0.5f, 0.5f); >;
    //#endif
	
    float3 FetchSceneColor( float2 vScreenUv )
    {
        return Tex2D( g_tColorBuffer, vScreenUv.xy ).rgb;
    }

    PixelOutput MainPs( PixelInput i )
    {
        PixelOutput o;
        float2 vScreenUv = i.vPositionSs.xy / g_vRenderTargetSize;
        float flDepth = ReconstructWorldDepth( Tex2DLevel( g_tDepthBuffer, vScreenUv, 0.0 ).r );

        float3 vFinalColor = FetchSceneColor( vScreenUv ).rgb;

        #if D_COLOR_OVERLAY
            float3 vEndMixColor = vColorOverlayColor;
            #if (D_COLOR_OVERLAY == 1)
                vEndMixColor = saturate( vFinalColor + vEndMixColor );
            #endif
            #if (D_COLOR_OVERLAY == 2)
                vEndMixColor = saturate( vFinalColor * vEndMixColor );
            #endif

            vFinalColor = lerp(vFinalColor, vEndMixColor, MapFalloff( flColorOverlayFalloffModifier, flDepth, 0.0f, flColorOverlayAmount ));
        #endif

        #if D_SATURATE
            vFinalColor = Saturation(vFinalColor, MapFalloff( flSaturationFalloffModifier, flDepth, 1.0f, flSaturationAmount ) );
        #endif

        #if D_FILM_GRAIN
            float2 vGrainUvs = TileAndOffsetUv( vScreenUv, float2(4.0f, 4.0f), float2(frac(g_flTime * 43.37281f), frac(g_flTime * 32.19f)) );
            float flGrain = Tex2DLevelS( g_tGrain, g_sBilinearWrap, vGrainUvs, 0 ).r;
            vFinalColor = FilmGrain( vFinalColor, flGrain, MapFalloff( flGrainFalloffModifier, flDepth, 0.0f, flGrainIntensity ), flGrainResponse );
        #endif

        #if D_VIGNETTE
            vFinalColor = Vignette( vFinalColor, vScreenUv, vVignetteColor, vVignetteCenter, flVignetteIntensity, flVignetteSmoothness, flVignetteRoundness );
        #endif

        o.vColor.rgb = vFinalColor;
        o.vColor.a = 1.0f;
        return o;
    }
}
