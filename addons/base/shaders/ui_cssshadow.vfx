HEADER
{
	DevShader = true;
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Version = 1;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
MODES
{
	Default();
	VrForward();
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
FEATURES
{
	
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
COMMON
{
	#include "ui/common.hlsl"
}
  
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
VS
{
	#include "ui/vertex.hlsl"  
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------
PS
{
	#include "ui/pixel.hlsl"  

	// Texture Samplers ---------------------------------------------------------------------------------------------------------------------------------------
	CreateInputTexture2D( Texture, Srgb, 8, "", "", "Color", Default3( 1.0, 1.0, 1.0 ) );
	CreateTexture2DInRegister( g_tColor, 0 ) < Channel( RGBA, None( Texture ), Srgb ); OutputFormat( DXT5 ); SrgbRead( true ); >;
	TextureAttribute( RepresentativeTexture, g_tColor );

	float4 CornerRadius < UiGroup( "Box" ); >;
	float ShadowWidth < UiGroup( "Shadow" ); >;

	// Render State -------------------------------------------------------------------------------------------------------------------------------------------
	RenderState( SrgbWriteEnable0, true );

	// Always alpha blend
	RenderState( BlendEnable, true );
	RenderState( SrcBlend, SRC_ALPHA );
	RenderState( DstBlend, INV_SRC_ALPHA );

	// Always write rgba
	RenderState( ColorWriteEnable0, RGBA );
	RenderState( FillMode, SOLID );

	// Never cull
	RenderState( CullMode, NONE );

	// No depth
	RenderState( DepthWriteEnable, false );

	// Main ---------------------------------------------------------------------------------------------------------------------------------------------------

	float RoundedRectangle( float2 pos, float2 center, float2 box, float size )
	{
		return size - length( pos - center );
	}

	float DrawCurvedRectWithBorder( float2 pos, float2 size )
	{
		float f = 1; // our panel alpha - we'll set to 0 for outside of radius corners

		f = min( pos.x, size.x - pos.x );
		f = min( f, pos.y );
		f = min( f, size.y - pos.y );
		
		float radAdd = ShadowWidth * 0.4;

		//
		// Top Left Radius
		//
		float r = min( size.y * 0.5, CornerRadius[0] + radAdd );
		if ( pos.x < r && pos.y < r )
		{
			f = min( f, RoundedRectangle( pos, r, size, r ) );
		}

		//
		// Top Right Radius
		//
		r = min( size.y * 0.5, CornerRadius[1] + radAdd );
		if ( pos.x > size.x - r && pos.y < r )
		{
			f = min( f, RoundedRectangle( pos, float2( size.x - r, r ), size, r ) );
		}

		//
		// Bottom Right Radius
		//
		r = min( size.y * 0.5, CornerRadius[3] + radAdd);
		if ( pos.x > size.x - r && pos.y > size.y - r )
		{
			f = min( f, RoundedRectangle( pos, float2( size.x - r, size.y - r ), size, r ) );
		}

		//
		// Right Bottom Radius
		//
		r = min( size.y * 0.5, CornerRadius[2] + radAdd );
		if ( pos.x < r && pos.y > size.y - r )
		{
			f = min( f, RoundedRectangle( pos, float2( r, size.y - r ), size, r ) );
		}

		return f;
	}


	PS_OUTPUT MainPs( PS_INPUT i )
	{
		PS_OUTPUT o;

		UI_CommonProcessing_Pre( i );
		
		float2 pos = (BoxSize * i.vTexCoord.xy);
		
		float distanceFromEdge = DrawCurvedRectWithBorder( pos, BoxSize ); 

	//	if ( dist < 0 )
    //    	discard;

		distanceFromEdge = smoothstep( -ShadowWidth * 0.5, ShadowWidth * 0.5, distanceFromEdge );

		o.vColor = i.vColor;
		o.vColor.a *= saturate( distanceFromEdge );

		return UI_CommonProcessing_Post( i, o );
	}
}
