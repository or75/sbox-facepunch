using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using Sandbox.Internal;

namespace Sandbox
{
	// Token: 0x02000035 RID: 53
	[AttributeUsage(AttributeTargets.Property)]
	public class PropertyAttribute : Attribute
	{
		/// <summary>
		/// The internal name of this property. This should be lowercase with no spaces. If unset the lowercased C# variable name is used.
		/// </summary>
		// Token: 0x17000094 RID: 148
		// (get) Token: 0x060002DA RID: 730 RVA: 0x0000B7FE File Offset: 0x000099FE
		// (set) Token: 0x060002DB RID: 731 RVA: 0x0000B806 File Offset: 0x00009A06
		public string Name { get; set; }

		/// <summary>
		/// The user friendly name of this property. If unset, it will be autogenerated from C# variable name.
		/// </summary>
		// Token: 0x17000095 RID: 149
		// (get) Token: 0x060002DC RID: 732 RVA: 0x0000B80F File Offset: 0x00009A0F
		// (set) Token: 0x060002DD RID: 733 RVA: 0x0000B817 File Offset: 0x00009A17
		public string Title { get; set; }

		/// <summary>
		/// The help text for this property.
		/// </summary>
		// Token: 0x17000096 RID: 150
		// (get) Token: 0x060002DE RID: 734 RVA: 0x0000B820 File Offset: 0x00009A20
		// (set) Token: 0x060002DF RID: 735 RVA: 0x0000B828 File Offset: 0x00009A28
		public string Help { get; protected set; }

		// Token: 0x060002E0 RID: 736 RVA: 0x0000B831 File Offset: 0x00009A31
		public PropertyAttribute()
		{
		}

		/// <param name="internal_name">The internal name of this property. This should be lowercase with no spaces.</param>
		/// <param name="help">Help text for this property.</param>
		// Token: 0x060002E1 RID: 737 RVA: 0x0000B839 File Offset: 0x00009A39
		public PropertyAttribute(string internal_name, string help = null)
		{
			this.Name = internal_name.Replace(" ", "_").Replace("\t", "_");
			this.Help = help;
		}

		/// <param name="internal_name">The internal name of this property. This should be lowercase with no spaces.</param>
		/// <param name="title">The user friendly name of this property to display in UI.</param>
		/// <param name="help">Help text for this property.</param>
		// Token: 0x060002E2 RID: 738 RVA: 0x0000B86D File Offset: 0x00009A6D
		public PropertyAttribute(string internal_name, string title, string help = null)
			: this(internal_name, help)
		{
			this.Title = title;
		}

		// Token: 0x17000097 RID: 151
		// (get) Token: 0x060002E3 RID: 739 RVA: 0x0000B87E File Offset: 0x00009A7E
		public string MemberName
		{
			get
			{
				return this.PropertyInfo.Name;
			}
		}

		// Token: 0x17000098 RID: 152
		// (get) Token: 0x060002E4 RID: 740 RVA: 0x0000B88B File Offset: 0x00009A8B
		public Type PropertyType
		{
			get
			{
				return this.PropertyInfo.PropertyType;
			}
		}

		// Token: 0x17000099 RID: 153
		// (get) Token: 0x060002E5 RID: 741 RVA: 0x0000B898 File Offset: 0x00009A98
		public Type DeclaringType
		{
			get
			{
				return this.PropertyInfo.DeclaringType;
			}
		}

		// Token: 0x1700009A RID: 154
		// (get) Token: 0x060002E6 RID: 742 RVA: 0x0000B8A5 File Offset: 0x00009AA5
		// (set) Token: 0x060002E7 RID: 743 RVA: 0x0000B8AD File Offset: 0x00009AAD
		internal List<Attribute> AttributesInternal { get; private set; }

		// Token: 0x1700009B RID: 155
		// (get) Token: 0x060002E8 RID: 744 RVA: 0x0000B8B6 File Offset: 0x00009AB6
		public IReadOnlyList<Attribute> Attributes
		{
			get
			{
				return this.AttributesInternal;
			}
		}

		/// <summary>
		/// Set the value of this property
		/// </summary>
		// Token: 0x060002E9 RID: 745 RVA: 0x0000B8C0 File Offset: 0x00009AC0
		public void SetValue(object source, object value)
		{
			if (value == null)
			{
				return;
			}
			Type sourceType = value.GetType();
			Type targetType = this.PropertyInfo.PropertyType;
			if (targetType.IsAssignableFrom(sourceType))
			{
				this.PropertyInfo.SetValue(source, value);
				return;
			}
			string stringValue = value as string;
			object convertedValue;
			if (stringValue != null && stringValue.TryToType(targetType, out convertedValue))
			{
				this.PropertyInfo.SetValue(source, convertedValue);
				return;
			}
			if (targetType == typeof(string))
			{
				this.PropertyInfo.SetValue(source, (value == null) ? "" : value.ToString());
				return;
			}
			foreach (MethodInfo method in this.PropertyInfo.PropertyType.GetMethods(BindingFlags.Static | BindingFlags.Public))
			{
				if (!(method.Name != "op_Implicit") && !(method.ReturnType != this.PropertyInfo.PropertyType))
				{
					object converted = method.Invoke(null, new object[] { value });
					this.PropertyInfo.SetValue(source, converted);
					return;
				}
			}
			GlobalSystemNamespace.Log.Info(FormattableStringFactory.Create("SetValue Missed: {0} {1} {2} ({3} => {4})", new object[] { this.Name, source, value, sourceType, targetType }));
		}

		/// <summary>
		/// Get the value of this property
		/// </summary>
		// Token: 0x060002EA RID: 746 RVA: 0x0000B9FD File Offset: 0x00009BFD
		public T GetValue<T>(object source)
		{
			return (T)((object)this.PropertyInfo.GetValue(source));
		}

		// Token: 0x060002EB RID: 747 RVA: 0x0000BA10 File Offset: 0x00009C10
		internal virtual void InitFromMember(PropertyInfo prop, LibraryAttribute library)
		{
			this.Owner = library;
			this.PropertyInfo = prop;
			this.AttributesInternal = prop.GetCustomAttributes(true).ToList<Attribute>();
			if (string.IsNullOrEmpty(this.Name))
			{
				this.Name = prop.Name;
			}
			if (string.IsNullOrEmpty(this.Title))
			{
				this.Title = prop.Name.ToTitleCase();
			}
			if (string.IsNullOrEmpty(this.Help))
			{
				DescriptionAttribute desc = prop.GetCustomAttributes<DescriptionAttribute>().FirstOrDefault<DescriptionAttribute>();
				if (desc != null)
				{
					this.Help = desc.Value;
				}
			}
			Action<string> onPropertyRegistered = PropertyAttribute.OnPropertyRegistered;
			if (onPropertyRegistered == null)
			{
				return;
			}
			onPropertyRegistered(this.Name);
		}

		/// <summary>
		/// The engine needs access when a property is registered, because we need to register the
		/// string with the StringToken system. This allows is to convert a string token to a string..
		/// .. which is needed so that KeyValues from the engine work properly.
		/// </summary>
		// Token: 0x1700009C RID: 156
		// (get) Token: 0x060002EC RID: 748 RVA: 0x0000BAB1 File Offset: 0x00009CB1
		// (set) Token: 0x060002ED RID: 749 RVA: 0x0000BAB8 File Offset: 0x00009CB8
		internal static Action<string> OnPropertyRegistered { get; set; }

		// Token: 0x040000A0 RID: 160
		internal PropertyInfo PropertyInfo;

		// Token: 0x040000A1 RID: 161
		internal LibraryAttribute Owner;
	}
}
